#!/bin/bash
# runs vmtranslator over some test files
# it assumes tests are in the directory containing this script
# it assumes that the executable is in the parent directory

export CSTOOLS_IOBUFFER_TRACES=iob_disable
export CSTOOLS_IOBUFFER_LOGS=iob_disable

# outputs to check, one of parser or translator
case $1 in
add-Pxml)
	command1="bin/parser"
	command2="cat"
	command3="cat"
	outputs="Pxml"
	regenerate="MISSING"
	echo "Adding missing Pxml files."
	;;
add-sim)
	command1="bin/parser"
	command2="bin/translator"
    command3="bin/simulator"
	outputs="sim"
	regenerate="MISSING"
	echo "Adding missing sim files."
	;;
new-Pxml)
	command1="bin/parser"
	command2="cat"
	command3="cat"
	outputs="Pxml"
	regenerate="ALL"
	echo "Regenerating all Pxml files."
	;;
new-sim)
	command1="bin/parser"
	command2="bin/translator"
    command3="bin/simulator"
	outputs="sim"
	regenerate="ALL"
	echo "Regenerating all sim files."
	;;
parser)
	command1="parser"
	command2="cat"
	command3="cat"
	outputs="Pxml"
	regenerate="NO"
	echo "Testing student vmparser against Pxml files."
	;;
parser-sim)
	command1="parser"
	command2="bin/translator"
    command3="bin/simulator"
	outputs="sim"
	regenerate="NO"
	echo "Testing student vmparser and working vmtranslator against sim files."
	;;
parser-translator)
	command1="parser"
	command2="translator"
    command3="bin/simulator"
	outputs="sim"
	regenerate="NO"
	echo "Testing student vmparser and student vmtranslator against sim files."
	;;
translator)
	command1="bin/parser"
	command2="translator"
    command3="bin/simulator"
	outputs="sim"
	regenerate="NO"
	echo "Testing working vmparser and student vmtranslator against sim files."
	;;
working-parser)
	command1="bin/parser"
	command2="cat"
	command3="cat"
	outputs="Pxml"
	regenerate="NO"
	echo "Testing working vmparser against Pxml files."
	;;
working-translator | *)
	command1="bin/parser"
	command2="bin/translator"
	command3="bin/simulator"
	outputs="sim"
	regenerate="NO"
	echo "Testing working vmparser and working vmtranslator against sim files."
	;;
esac

# display messages or hide them
case $2 in
quiet)
	loud="quiet"
	;;
loud)
	loud="loud"
	;;
*)
	loud="loud"
	;;
esac

# work out relative path to tests directory
THISPWD=`pwd`

# cd to the lib directory - where this script is
LIBDIR=`dirname $0`
cd "$LIBDIR"
LIBPWD=`pwd`

# find the parent directory name
PARENTDIR=`dirname "${LIBPWD}"`

# check we have a tests dir
if [ ! -d "../tests" ] ; then
	echo "Cannot find the tests directory"
	exit -1
fi

# cd to the tests dir
cd "../tests"
TESTPWD=`pwd`

# fix up pathnames to be displayed to the user
if [ "$THISPWD" == "$TESTPWD" ] ; then
	TESTDIR=""
	PARENTDIR="../"
elif [ "$THISPWD" == "$LIBPWD" ] ; then
	TESTDIR="../tests/"
	PARENTDIR="../"
elif [ "$THISPWD" == "$PARENTDIR" ] ; then
	TESTDIR="tests/"
	PARENTDIR="./"
else
	echo "Execute the following command first if you want to cut-paste the test commands:"
	echo "cd ${PARENTDIR}"
	echo
	TESTDIR="tests/"
	PARENTDIR="./"
fi

# check we have command1
if [ ! -x "../${command1}" ] ; then
	echo Cannot find executable ${PARENTDIR}${command1}
	exit -1
fi

# check we have command2
if [ "x${command2}" != "xcat" -a ! -x "../${command2}" ] ; then
	echo Cannot find executable ${PARENTDIR}${command2}
	exit -1
fi

### PRETTY STUFF ###

# if using an xterm - use headings and colour coded test results
if [ "${TERM:0:5}" == "xterm" -o "${TERM:0:2}" == "vt" ] ; then
	colorboldblack="\x1b[1;7;30m"
	colorboldgreen="\x1b[1;7;32m"
	colorboldred="\x1b[1;7;31m"
	undocolor="\x1b[0m"
else
	colorboldblack=
	colorboldgreen=
	colorboldred=
	undocolor=
fi

# make a string of whitespace matching the longest string parameter
padding=
setpadding()
{
	padding=
	while [ "${#@}" -gt 0 ] ; do
		while [ "${#padding}" -lt "${#1}" ] ; do
			padding="${padding} "
		done
		shift 1
	done
}

# column1 - blank
setpadding "Checking"
col1="${padding}"

# column2 - test input file
setpadding "cat ${TESTDIR}example.vm"
input_padding="${padding}"

col2="    Test Input"
col2="${col2}${input_padding:${#col2}}"

# column3 - command1
setpadding "${PARENTDIR}${command1}"
command_padding1="${padding}"

col3="  ${command1}"
col3="${col3}${command_padding1:${#col3}}"

# column4 - command2
setpadding "${PARENTDIR}${command2}"
command_padding2="${padding}"

col4="  ${command2}"
col4="${col4}${command_padding2:${#col4}}"

# column5 - command3
setpadding "${PARENTDIR}${command3}"
command_padding3="${padding}"

col5="  ${command3}"
col5="${col5}${command_padding3:${#col5}}"

# column 6 - test expected output file
setpadding "diff - ${TESTDIR}example.vm.Pxml"
output_padding="${padding}"

col6="       Expected Test Output"
col6="${col6}${output_padding:${#col6}}"

# column 7 - test result
setpadding " test passed " " test failed "
result_padding="${padding}"
col7="Test Result"
col7="${col7}${result_padding:${#col7}}"

# nullglob is set so nothing runs if there are no test files
shopt -s nullglob

banner="NO"
header=
columns=
display_banner()
{
	if [ "${banner}" == "YES" ] ; then return ; fi

	banner="YES"
	if [ ${#header} -gt 0 ] ; then echo "${header}" ; fi
	if [ ${#columns} -gt 0 ] ; then echo -e "${columns}" ; fi
}

# nullglob is set so nothing runs if there are no test files
shopt -s nullglob

if [ "${command2}" == "cat" ] ; then
    parent_dir_command2=
    command2=cat
    col4=
else
    parent_dir_command2="| ${PARENTDIR}${command2}"
    command2="../${command2}"
    col4="| ${col4}"
fi

if [ "${command3}" == "cat" ] ; then
    parent_dir_command3=
    command3=cat
    col5=
else
    parent_dir_command3="| ${PARENTDIR}${command3}"
    command3="../${command3}"
    col5="| ${col5}"
fi

if [ "${regenerate}" == "ALL" ] ; then
	# run working with all test files to generate matching output file
	for i in *.vm ; do
		input="${i}"
		output="${i}.${outputs}"
        testmessage="Regenerating \"${TESTDIR}${output}\" - "

        rm -f "${output}.err"
        if cat "${input}" | "../${command1}" 2>&1 | "${command2}" 2>&1 | "${command3}" > "${output}" 2> "${output}.err" ; then
            if [ -s ${output}.err ] ; then
                echo -e "${testmessage} ${colorboldred}failed${undocolor}"
                rm -f ${output}
                rm -f ${output}.err
            else
                if [ "${loud}" != "quiet" ] ; then echo -e "${testmessage} ${colorboldgreen}ok${undocolor}" ; fi
            fi
        else
            echo -e "${testmessage} ${colorboldred}failed${undocolor}"
        fi
        rm -f ${output}.err
    done
    echo
elif [ "${regenerate}" == "MISSING" ] ; then
	# run working tokeniser generate missing output files
	for i in *.vm ; do
		input="${i%%.tokens}"
		output="${i}.${outputs}"
		testmessage="Generating \"${TESTDIR}${output}\" - "

        if [ ! -f "${output}" ] ; then
            rm -f "${output}.err"
            if cat "${input}" | "../${command1}" 2>&1 | "${command2}" 2>&1 | "${command3}" > "${output}" 2> "${output}.err" ; then
                if [ -s ${output}.err ] ; then
                    echo -e "${testmessage} ${colorboldred}failed${undocolor}"
                    rm -f ${output}
                    rm -f ${output}.err
                else
                    if [ "${loud}" != "quiet" ] ; then echo -e "${testmessage} ${colorboldgreen}ok${undocolor}" ; fi
                fi
            else
                echo -e "${testmessage} ${colorboldred}failed${undocolor}"
            fi
            rm -f ${output}.err
        fi
	done
    echo
else
    if [ "${command3}" == "../bin/simulator" ] ; then
        qspacea=" "
        qspaceb=""
        quotea="\""
        quoteb=""
    else
        qspacea=""
        qspaceb=" "
        quotea=""
        quoteb="\""
    fi
    # test command1 | command2 with all test files that have a matching output kind file
	columns="${colorboldblack}${col1}| ${col2} | ${col3} ${col4} ${col5}${qspacea} | ${col6}${qspaceb}  | ${col7} ${undocolor}"
    for i in *.vm.${outputs} ; do
        input="${i%%.${outputs}}"
        display_input="cat ${TESTDIR}${input}"
        display_input="${display_input}${input_padding:${#display_input}}"

        display_output="diff - ${TESTDIR}${i}"
        display_output="${display_output}${output_padding:${#display_output}}"

        if [ -f "${input}" ] ; then
            testmessage="Checking \"${display_input} | ${PARENTDIR}${command1} ${parent_dir_command2} ${parent_dir_command3}${quotea} | ${display_output}${quoteb}  - "
            if "../${command1}" < ${input} 2>&1 | "${command2}" 2>&1 | "${command3}" 2>&1 | diff -qw - ${i} > /dev/null 2> /dev/null ; then
				if [ "${loud}" != "quiet" ] ; then
					display_banner
					echo -e "${testmessage} ${colorboldgreen}test passed${undocolor}" ;
				fi
			else
				display_banner
				echo -e "${testmessage} ${colorboldred}test failed${undocolor}"
			fi
		fi
	done
    echo
fi
